# shamelessly taken from
# https://github.com/BurntSushi/ripgrep/blob/master/.github/workflows/release.yml

name: release
on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
      hexagon_version: ${{ env.HEXAGON_VERSION }}

    steps:
      - name: Get release version from tag
        shell: bash
        if: env.HEXAGON_VERSION == ''
        run: |
          # See: https://github.community/t5/GitHub-Actions/How-to-get-just-the-tag-name/m-p/32167/highlight/true#M1027
          echo "HEXAGON_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo "version is: ${{ env.HEXAGON_VERSION }}"
      - name: Create GitHub release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.HEXAGON_VERSION }}
          release_name: ${{ env.HEXAGON_VERSION }}

  build-release:
    name: Build Release
    needs: ["create-release"]
    runs-on: ${{ matrix.os }}
    env:
      CARGO: cargo
      # When CARGO is set to CROSS, this is set to `--target matrix.target`.
      TARGET_FLAGS: ""
      # When CARGO is set to CROSS, TARGET_DIR includes matrix.target.
      TARGET_DIR: ./target
      # Emit back-traces on panics.
      RUST_BACKTRACE: 1
    strategy:
      matrix:
        build: [linux, linux-arm, macos]
        include:
          - build: linux
            os: ubuntu-18.04
            rust: nightly
            target: x86_64-unknown-linux-musl
          - build: linux-arm
            os: ubuntu-18.04
            rust: nightly
            target: arm-unknown-linux-gnueabihf
          - build: macos
            os: macos-latest
            rust: nightly
            target: x86_64-apple-darwin

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Install packages (Ubuntu)
        if: matrix.os == 'ubuntu-18.04'
        run: |
          ci/ubuntu-install-packages

      - name: Install packages (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          ci/macos-install-packages

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true
          target: ${{ matrix.target }}

      - name: Use Cross
        shell: bash
        run: |
          cargo install cross
          echo "CARGO=cross" >> $GITHUB_ENV
          echo "TARGET_FLAGS=--target ${{ matrix.target }}" >> $GITHUB_ENV
          echo "TARGET_DIR=./target/${{ matrix.target }}" >> $GITHUB_ENV

      - name: Show command used for Cargo
        run: |
          echo "cargo command is: ${{ env.CARGO }}"
          echo "target flag is: ${{ env.TARGET_FLAGS }}"
          echo "target dir is: ${{ env.TARGET_DIR }}"

      - name: Build release binary
        run: ${{ env.CARGO }} build --verbose --release ${{ env.TARGET_FLAGS }}

      - name: Strip release binary (linux and macos)
        if: matrix.build == 'linux' || matrix.build == 'macos'
        run: strip "target/${{ matrix.target }}/release/hexagon"

      - name: Strip release binary (arm)
        if: matrix.build == 'linux-arm'
        run: |
          docker run --rm -v \
            "$PWD/target:/target:Z" \
            rustembedded/cross:arm-unknown-linux-gnueabihf \
            arm-linux-gnueabihf-strip \
            /target/arm-unknown-linux-gnueabihf/release/hexagon

      - name: Build archive
        shell: bash
        run: |
          outdir="$(ci/cargo-out-dir "${{ env.TARGET_DIR }}")"
          staging="hexagon-${{ needs.create-release.outputs.hexagon_version }}-${{ matrix.target }}"
          mkdir -p "$staging"/{complete}

          cp {README.md} "$staging/"

          cp "target/${{ matrix.target }}/release/hexagon" "$staging/"
          tar czf "$staging.tar.gz" "$staging"
          echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV

      - name: Upload release archive
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.ASSET }}
          asset_name: ${{ env.ASSET }}
          asset_content_type: application/octet-stream
